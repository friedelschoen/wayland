// Package wayland is partly used by code generated by `gowls`, but also helpers for your support code.
package wayland

import "fmt"

type Event interface {
	Proxy() Proxy
}

type EventHandlerFunc func(e Event) bool

type Proxy interface {
	Register(*Conn, uint32)
	Conn() *Conn
	ID() uint32

	Dispatch(msg *Message, drain chan<- Event)
	Name() string
	Valid() bool
}

type BaseProxy struct {
	conn *Conn
	id   uint32
}

func (p *BaseProxy) Register(conn *Conn, id uint32) {
	p.conn = conn
	p.id = id
}

func (p *BaseProxy) Valid() bool {
	return p != nil && p.conn != nil && p.id != 0
}

func (p *BaseProxy) Conn() *Conn {
	return p.conn
}

func (p *BaseProxy) ID() uint32 {
	return p.id
}

func (p *BaseProxy) Name() string {
	return "BaseProxy"
}

func (p *BaseProxy) String() string {
	return fmt.Sprintf("%s[%d]", p.Name(), p.ID())
}

func (p *BaseProxy) Dispatch(msg *Message, drain chan<- Event) {
	/* do nothing */
}
